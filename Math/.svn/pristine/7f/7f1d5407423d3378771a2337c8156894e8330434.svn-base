package math;


import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.Random;

import org.apache.log4j.Logger;

/**
 * 
 * @author Patrick Gunia
 * 
 * Klasse zur Verwaltung konvexer und konkaver Polygone.
 * 
 */

public class MyPolygon implements Cloneable {

	/** Logging-Instanz */
	protected final static Logger LOGGER = Logger.getLogger("math.MyPolygon");
	
	/** Eckpunkte des Polygons definiert im Uhrzeigersinn */
	protected transient List<Vertex3d> mVertices = null;
	
	/** Strahlenrepraesentation des Polygonzugs */
	private transient List<Ray> mRays = null;
	
	/** Ebene, in der das Polygon enthalten ist */
	private transient Plane mPlane = null;

	// ------------------------------------------------------------------------------------------

	/**
	 * @param mPoints
	 */
	public MyPolygon(final List<Vertex3d> mPoints) {
		update(mPoints);
		}
		
	// ------------------------------------------------------------------------------------------
	/**
	 * Methode fuehrt eine Updateberechnung fuer die uebergebenen neuen Punkte durch, fuer diese werden neue Strahlen, Ebenen etc. gesetzt
	 * @param points Punkte, die das Polygon definieren
	 */
	final public void update(final List<Vertex3d> points) {
		this.mVertices = new ArrayList<Vertex3d>(points.size());
		this.mVertices.addAll(points);
		computeRaysForPoints();
		computePlaneForPolygon();
	}
	
	// ------------------------------------------------------------------------------------------
	/**
	 * Update ohne Uebergabe neuer Punkte
	 */
	public void update() {
		computeRaysForPoints();
		computePlaneForPolygon();
	}
	
	
	// ------------------------------------------------------------------------------------------

	/**
	 * 
	 */
	public MyPolygon() {
		super();
		mVertices = new ArrayList<Vertex3d>();
		mRays = new ArrayList<Ray>();
	}
	// ------------------------------------------------------------------------------------------
	
	/**
	 * @return the mPoints
	 */
	public List<Vertex3d> getVertices() {
		return mVertices;
	}

	// ------------------------------------------------------------------------------------------

	/**
	 * @param mPoints the mPoints to set
	 */
	public void setPoints(final List<Vertex3d> mPoints) {
		this.mVertices = mPoints;
	}

	// ------------------------------------------------------------------------------------------

	/**
	 * @return the mRays
	 */
	public List<Ray> getRays() {
		return mRays;
	}

	// ------------------------------------------------------------------------------------------

	/**
	 * @param mRays the mRays to set
	 */
	public void setRays(final List<Ray> mRays) {
		this.mRays = mRays;
		
		// wenn der Ray-Vector gesetzt wurde, extrahiere alle Punkte und befuelle damit den
		// Points-Vector
	
		Ray currentRay = null;
		Vertex3d currentVert = null;
		
		for(int i = 0; i < mRays.size(); i++) {
			currentRay = mRays.get(i);
			currentVert = new Vertex3d(currentRay.getStart());
			mVertices.add(currentVert);
		}
		computePlaneForPolygon();
	}
	// ------------------------------------------------------------------------------------------
	/**
	 * @return Deep-Copy der Ebenennormale der Polygonebene
	 */
	public MyVector3f getNormal() {
		assert mPlane != null: "FEHLER: Es wurde noch keine gueltige Polygonebene berechnet";
		return mPlane.getNormal().clone();
	}
	// ------------------------------------------------------------------------------------------
	/**
	 * @return Referenz auf die Normale der Polygonebene
	 */
	public MyVector3f getNormalPtr() {
		assert mPlane != null: "FEHLER: Es wurde noch keine gueltige Polygonebene berechnet";
		return mPlane.getNormal();
	}
	// ------------------------------------------------------------------------------------------
	/**
	 * Methode berechnet eine Repraesentation des Polygons als geschlossener Strahlenzug von Ray-Instanzen
	 */
	private void computeRaysForPoints() {
		
		mRays = new ArrayList<Ray>();
		assert !mVertices.isEmpty(): "FEHLER: Es wurden keine Vertices fuer das Polygon gesetzt";
		
		Ray currentRay = null;
		Vertex3d currentVertex = null, currentNeighbour = null;
		
		// berechne aus jeweils 2 aufeinanderfolgenden Punkten im Vector einen Strahl und fuege ihn zum
		// Strahlenvektor hinzu
		for(int i = 0; i < mVertices.size(); i++) {
			
			currentVertex = mVertices.get(i);
			currentNeighbour = mVertices.get((i + 1) % mVertices.size());
			
			currentRay = new Ray(currentVertex, currentNeighbour);
			mRays.add(currentRay);
		}
	}
	
	// ------------------------------------------------------------------------------------------
	/**
	 * Methode berechnet eine Ebene, die das Polygon enthaelt
	 * 
	 */
	private void computePlaneForPolygon() {
		
		mPlane = MyVectormath.getInstance().calculatePlaneByVertices(mVertices);
	}
	// ------------------------------------------------------------------------------------------

	/**
	 * Methode liefert einen Punkt im Inneren des Polygons, indem ausgehend vom Mittelpunkt in Richtung eines zufaellig gewaehlten Eckpunkts um einen zufaelligen Betrag verschoben wird
	 * @return Kann bei konkaven Polygonen zu Problemen
	 */
	public MyVector3f getPointInPoly() {
		
		final MyVectormath mathHelper = MyVectormath.getInstance();
		final Random rand = new Random();
		
		// waehle zufaellig einen Eckpunkt
		final int index = rand.nextInt(getVertices().size());
		final Vertex3d vert = mVertices.get(index);
		
		final MyVector3f center =  getCenter();
		
		final MyVector3f centerToPoint = new MyVector3f();
		centerToPoint.sub(vert.getPositionPtr(), center);
		
		// Vektor zufallsbasiert skalieren
		centerToPoint.scale(mathHelper.getRandomValueWithinRange(0.2f, 0.8f));
		final MyVector3f result = new MyVector3f();
		result.add(center, centerToPoint);
		
		// teste, ob sich der Punkt innerhalb des Polygons befindet
		assert mathHelper.isPointInPolygon(this, new Vertex3d(result)): "FEHLER: Der ermittelte Punkt liegt nicht innerhalb des Quellpolygons!";
		return result;
	}
	
	// ------------------------------------------------------------------------------------------
	/**
	 * Methode berechnet den Mittelpunkt des Polygons
	 * @return Mittelpunkt des Polygons
	 */
	public MyVector3f getCenter() {
		return MyVectormath.getInstance().calculatePolygonCenter(getVertices());
	}
	
	
	// ------------------------------------------------------------------------------------------
	/**
	 * Methode testet, ob der uebergebene Strahl eine Kante des Polygons beschreibt
	 * @param ray Strahl, fuer den getestet wird, ob er Teil des Polygonzugs ist
	 * @return True, falls der Strahl eine Kante bildet, False sonst
	 */
	public boolean isRayInPolygon(final Ray ray) {
		return mRays.contains(ray);
	}
	// ------------------------------------------------------------------------------------------



	/* (non-Javadoc)
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		
		final StringBuffer strBuf = new StringBuffer(100);
		final String lineBreak = System.getProperty("line.separator");
		strBuf.append("Polygon: " + lineBreak);
		for(int i = 0; i < mVertices.size(); i++) {
			strBuf.append("mVertices.add(new Vertex3d(" + mVertices.get(i).getX() + "f, " + mVertices.get(i).getY() + "f, " + mVertices.get(i).getZ() + "f));"+ lineBreak);
		}
		
		return strBuf.toString();
	}
	// ------------------------------------------------------------------------------------------

	/**
	 * @return the mPlane
	 */
	public Plane getPlane() {
		return mPlane;
	}
	// ------------------------------------------------------------------------------------------

	/**
	 * @param mPlane the mPlane to set
	 */
	public void setPlane(final Plane mPlane) {
		this.mPlane = mPlane;
	}
	// ------------------------------------------------------------------------------------------
	/**
	 * Methode skaliert das aktuelle Polygon um den uebergebenen Scalingfaktor. Dazu berechnet man vom Polygonmittelpunkt Vektoren auf jedes einzelne Vertex und skaliert diesen Vektor.
	 * @param scalingFactor
	 */
	public void scale(final Float scalingFactor) {
		
		final MyVector3f center = getCenter();
		MyVector3f centerToPoint = null;		
		for(Vertex3d currentVert : mVertices) {
			centerToPoint = new MyVector3f();
			centerToPoint.sub(currentVert.getPositionPtr(), center);
			centerToPoint.scale(scalingFactor);
			currentVert.getPositionPtr().add(centerToPoint, center);
		}		
	}
	
	// ------------------------------------------------------------------------------------------
	/**
	 * Methode fuehrt eine Insetberechnung durch, bei der jeder Punkt um den uebergebenen insetAmount in Richtung des Polygonmittelpunkts verschoben wird
	 * @param insetAmount Betrag, um den die Polygonpunkte in Richtung des Polygonmittelpunkts verschoben werden
	 */
	public void inset(final Float insetAmount) {

		final MyVector3f center = getCenter();
		MyVector3f centerToPoint = null, originalPosition = null;
		for (Vertex3d currentVert : mVertices) {
			centerToPoint = new MyVector3f();
			originalPosition = currentVert.getPosition();
			centerToPoint.sub(center, originalPosition);
			centerToPoint.normalize();
			centerToPoint.scale(insetAmount);
			currentVert.getPositionPtr().add(centerToPoint, originalPosition);
		}
		update();
	}
	
	// ------------------------------------------------------------------------------------------
	
	/**
	 * Methode verschiebt alle Polygonpunkte um den uebergebenen Translationsvektor
	 * @param translate Verschiebungsvektor
	 */
	public void translate(final MyVector3f translate) {
		
		for(Vertex3d curVertex : mVertices) {
			curVertex.getPositionPtr().add(translate);
		}
		computeRaysForPoints();
		computePlaneForPolygon();
		
	}
	// ------------------------------------------------------------------------------------------
	@Override
	public MyPolygon clone()  {
		MyPolygon clone = null;
		try {
			clone = (MyPolygon) super.clone();
		} catch (CloneNotSupportedException e) {
			e.printStackTrace();
		}
		final List<Vertex3d> verts = new ArrayList<Vertex3d>(mVertices.size());
		for(int i = 0; i < mVertices.size(); i++) verts.add(mVertices.get(i).clone());
		clone.update(verts);
		return clone;
		
	}
	// ------------------------------------------------------------------------------------------
	/** 
	 * Methode berechnet einen Strahl von der oberen auf die untere Kante des MBRs des Polygons. Bei "normalen" rechteckigen Wandquads, die senkrecht zur XZ-Ebene stehen, entspricht die Ergebniskante einer Quadkante. 
	 * Unabhaengig von der Ausrichtung des Eingabequads verlaeuft der zurueckgegebene Strahl immer vollstaendig in der Ebene des Eingabequads.
	 * @return Strahl, der von der oberen zur unteren Polygonkante innerhalb der Polygonebene verlaeuft 
	 */
	public Ray getVerticalRay() {

		final MyVectormath mathHelper = MyVectormath.getInstance();
		
		// berechne das MBR
		final MyPolygon mbr = mathHelper.getMinAreaRect(getVertices());
		
		// bestimme das Vertex mit der minimalen y-koordinate innerhalb des MBR (Processing-Koordinatensystem)
		float minY = Float.MAX_VALUE;
		Vertex3d minVert = null;
		List<Vertex3d> mbrVertices = mbr.getVertices();
		
		// bestimme das Vertex mit minimalem y-Wert
		for(Vertex3d vertex : mbrVertices) {
			if(vertex.getY() < minY) {
				minY = vertex.getY();
				minVert = vertex;
			}
		}
		
		int indexMin = mbrVertices.indexOf(minVert);
		
		// waehle das Nachbarvertex, dessen y-Wert sich vom minimalen y-Wert unterscheidet
		int prevIndex = indexMin - 1;
		if(prevIndex < 0) {
			prevIndex = mbrVertices.size() - 1;
		}
		int nextIndex = (indexMin + 1) % mbrVertices.size();
		
		Vertex3d neighbour = mbrVertices.get(prevIndex);
		if(neighbour.getY() == minY) {
			neighbour = mbrVertices.get(nextIndex);
		}
		
		return new Ray(minVert, neighbour);
	
	}
	// ------------------------------------------------------------------------------------------
	/**
	 * Methode berechnet einen einfachen Schwerpunkt (mathematisch nicht korrekt, aber als Kennwert ausreichend) als Mittelwert der Polygonvertices
	 * @return Mittelwert der Polygoneckpunkte
	 */
	public MyVector3f getAveragedVertices() {
		
		MyVector3f result = new MyVector3f();
		for(int i = 0; i < mVertices.size(); i++) result.add(mVertices.get(i).getPositionPtr());
		float scale = 1.0f / mVertices.size();
		result.scale(scale);
		return result;
		
	}
	// ------------------------------------------------------------------------------------------
	/**
	 * Methode kehrt die Vertexorder im Polygon um und fuehrt anschliessend Updates saemtlicher internen Strukturen durch
	 */
	public void switchVertexOrder() {
		
		// Vertexabfolge drehen
		Collections.reverse(mVertices);
		
		// Updates
		update();
	}
	// ------------------------------------------------------------------------------------------
	/**
	 * Methode berechnet die Hoehe des Polygons ueber die Hoehe des minimalen Bounding-Rechtecks, das das Polygon enthaelt
	 * @return Hoehe des Polygons
	 */
	public Float getHeight() {
		final MyVectormath mathHelper = MyVectormath.getInstance();
		
		// handelt es sich um ein Polygon in der XZ-Ebene? 
		// In diesem Fall ist die Hoehe per Definition 0
		final MyVector3f xzNormal = new MyVector3f(0.0f, 1.0f, 0.0f);
		double angle = mathHelper.calculateAngleRadians(getNormalPtr(), xzNormal);
		if(angle == 0.0d) {
			return 0.0f;
		}
		
		final MyPolygon minAreaRect = mathHelper.getMinAreaRect(getVertices());
		
		// bestimme zwei aufeinanderfolgende Vertices mit unterschiedlicher y-Koordinate
		Vertex3d first = null, second = null;
		float curY = -1;
		
		for(Vertex3d curVert : minAreaRect.getVertices()) {
			
			if(curY == -1) {
				first = curVert;
				curY = curVert.getY();
			} else {
				// gleiche Y-Koordinate
				if(curY == curVert.getY()) {
					first = curVert;
					curY = curVert.getY();
				// unterschiedliches y => Abbruch
				} else {
					second = curVert;
					break;
				}
			}
		}
		
		// die Hoehe des Polygons entspricht jetzt dem Abstand zwischen den beiden ermittelten Vertices
		return mathHelper.calculatePointPointDistance(first.getPositionPtr(), second.getPositionPtr());
	}
	// ------------------------------------------------------------------------------------------
	/**
	 * Methode ermittelt, ob es sich bei dem Polygon um ein Rechteck handelt, dies ist der Fall, wenn alle Winkel 90° sind
	 * @return True, falls das Polygon ein Rechteck beschreibt, False sonst
	 */
	public Boolean isRectangle() {
		
		// 4 Eckpunkte
		if(mVertices.size() != 4) {
			return false;
		}
		
		final MyVectormath mathHelper = MyVectormath.getInstance();
		
		// wenn 4 Eckpunkte vorliegen, reicht es, wenn 2 Winkel = 90° sind
		final List<Ray> rays = getRays();
		Ray curRay = null, nextRay = null;
		for(int i = 0; i < rays.size(); i++) {
			curRay = rays.get(i);
			nextRay = rays.get((i + 1) % 4);
			
			// sobald ein nicht-90° Winkel gefunden wurde, breche ab
			if(!mathHelper.isOrthogonal(curRay.getDirectionPtr(), nextRay.getDirectionPtr())) {
				return false;
			}
			
			// wenn bei 4 Punkten 2 90°-Winkel gefunden wurden, handelt es sich um ein Rechteck
			if(i == 1) {
				return true;
			}
		}
		return false;
		
	}
	// ------------------------------------------------------------------------------------------


}
