<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!--NewPage-->
<HTML>
<HEAD>
<!-- Generated by javadoc (build 1.6.0_20) on Wed Oct 06 13:54:26 CEST 2010 -->
<TITLE>
C-Index
</TITLE>

<META NAME="date" CONTENT="2010-10-06">

<LINK REL ="stylesheet" TYPE="text/css" HREF="../stylesheet.css" TITLE="Style">

<SCRIPT type="text/javascript">
function windowTitle()
{
    if (location.href.indexOf('is-external=true') == -1) {
        parent.document.title="C-Index";
    }
}
</SCRIPT>
<NOSCRIPT>
</NOSCRIPT>

</HEAD>

<BODY BGCOLOR="white" onload="windowTitle();">
<HR>


<!-- ========= START OF TOP NAVBAR ======= -->
<A NAME="navbar_top"><!-- --></A>
<A HREF="#skip-navbar_top" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_top_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <FONT CLASS="NavBarFont1">Package</FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <FONT CLASS="NavBarFont1">Class</FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <FONT CLASS="NavBarFont1">Use</FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../overview-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Index</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="index-1.html"><B>PREV LETTER</B></A>&nbsp;
&nbsp;<A HREF="index-3.html"><B>NEXT LETTER</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../index.html?index-filesindex-2.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="index-2.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_top"></A>
<!-- ========= END OF TOP NAVBAR ========= -->

<A HREF="index-1.html">A</A> <A HREF="index-2.html">C</A> <A HREF="index-3.html">D</A> <A HREF="index-4.html">E</A> <A HREF="index-5.html">G</A> <A HREF="index-6.html">H</A> <A HREF="index-7.html">I</A> <A HREF="index-8.html">L</A> <A HREF="index-9.html">M</A> <A HREF="index-10.html">N</A> <A HREF="index-11.html">P</A> <A HREF="index-12.html">R</A> <A HREF="index-13.html">S</A> <A HREF="index-14.html">T</A> <A HREF="index-15.html">U</A> <A HREF="index-16.html">V</A> <HR>
<A NAME="_C_"><!-- --></A><H2>
<B>C</B></H2>
<DL>
<DT><A HREF="../math/MyVectormath.html#calculateAngle(graphics.MyVector3f, graphics.MyVector3f)"><B>calculateAngle(MyVector3f, MyVector3f)</B></A> - 
Method in class math.<A HREF="../math/MyVectormath.html" title="class in math">MyVectormath</A>
<DD>berechnet den Winkel zwischen zwei Vektoren, Vorteil sind kleinere bis keine Rundungsfehler
<DT><A HREF="../math/MyVectormath.html#calculateOrthogonalVectorWithSamePlane(graphics.MyVector3f, graphics.MyVector3f)"><B>calculateOrthogonalVectorWithSamePlane(MyVector3f, MyVector3f)</B></A> - 
Method in class math.<A HREF="../math/MyVectormath.html" title="class in math">MyVectormath</A>
<DD>Methode berechnet einen orthogonalen Vektor zum uebergebenen Source-Vektor basierend
  auf einer 90Â°-Drehung um die Vertex-Normale
<DT><A HREF="../graphics/Plane.html#calculateParameterdarstellung()"><B>calculateParameterdarstellung()</B></A> - 
Method in class graphics.<A HREF="../graphics/Plane.html" title="class in graphics">Plane</A>
<DD>&nbsp;
<DT><A HREF="../graphics/Plane.html#calculateParameterfreieDarstellung()"><B>calculateParameterfreieDarstellung()</B></A> - 
Method in class graphics.<A HREF="../graphics/Plane.html" title="class in graphics">Plane</A>
<DD>&nbsp;
<DT><A HREF="../math/MyVectormath.html#calculateParameterOnRayForPoint(graphics.MyVector3f, graphics.Ray)"><B>calculateParameterOnRayForPoint(MyVector3f, Ray)</B></A> - 
Method in class math.<A HREF="../math/MyVectormath.html" title="class in math">MyVectormath</A>
<DD>Methode berechnet den Parameter k in der Punkt-Richtungsdarstellung der Geraden
 Geht davon aus, dass der Punkt auf der Geraden liegt
<DT><A HREF="../math/MyVectormath.html#calculatePlane2PlaneIntersectionDirection(graphics.Plane, graphics.Plane)"><B>calculatePlane2PlaneIntersectionDirection(Plane, Plane)</B></A> - 
Method in class math.<A HREF="../math/MyVectormath.html" title="class in math">MyVectormath</A>
<DD>Berechnet die Richtung der Schnittgeraden zweier Ebenen
 gibt null zurueck, wenn die Ebenen parallel oder identisch sind,
 sonst den Richtungsvektor
<DT><A HREF="../math/MyVectormath.html#calculatePlanePlanePlaneIntersection(graphics.Plane, graphics.Plane, graphics.Plane)"><B>calculatePlanePlanePlaneIntersection(Plane, Plane, Plane)</B></A> - 
Method in class math.<A HREF="../math/MyVectormath.html" title="class in math">MyVectormath</A>
<DD>berechnet den Schnittpunkt 3er Ebenen ueber den JAMA-Matrix-Solver
<DT><A HREF="../math/MyVectormath.html#calculatePointEdgeDistance(graphics.MyVector3f, graphics.Ray)"><B>calculatePointEdgeDistance(MyVector3f, Ray)</B></A> - 
Method in class math.<A HREF="../math/MyVectormath.html" title="class in math">MyVectormath</A>
<DD>berechnet die Distanz des Punktes point von der Geraden edge
  Formel: d(point, edge) = |(a-b) x r| / |r|
  a := Ortsvektor von Point
  b := Stuetzvektor der Geraden
  r := Richtungsvektor der Geraden
  http://www.tutorials.de/java/340809-abstand-punkt-zu-gerade.html
<DT><A HREF="../math/MyVectormath.html#calculatePointPlaneDistance(graphics.MyVector3f, graphics.Plane)"><B>calculatePointPlaneDistance(MyVector3f, Plane)</B></A> - 
Method in class math.<A HREF="../math/MyVectormath.html" title="class in math">MyVectormath</A>
<DD>Berechnet den senkrechten Abstand des Punktes von der Ebene
<DT><A HREF="../math/MyVectormath.html#calculatePointPointDistance(graphics.MyVector3f, graphics.MyVector3f)"><B>calculatePointPointDistance(MyVector3f, MyVector3f)</B></A> - 
Method in class math.<A HREF="../math/MyVectormath.html" title="class in math">MyVectormath</A>
<DD>Methode zur Berechnung des Abstands zweier Punkte im 3-dimensionalen Raum.
<DT><A HREF="../algorithm/SkeletonEdge.html#calculatePointsOnPlane()"><B>calculatePointsOnPlane()</B></A> - 
Method in class algorithm.<A HREF="../algorithm/SkeletonEdge.html" title="class in algorithm">SkeletonEdge</A>
<DD>&nbsp;
<DT><A HREF="../graphics/Line.html#calculateRay(java.util.ArrayList)"><B>calculateRay(ArrayList&lt;Vertex3d&gt;)</B></A> - 
Method in class graphics.<A HREF="../graphics/Line.html" title="class in graphics">Line</A>
<DD>&nbsp;
<DT><A HREF="../math/MyVectormath.html#calculateRay2RayIntersection3DVectorStyle(graphics.Ray, graphics.Ray)"><B>calculateRay2RayIntersection3DVectorStyle(Ray, Ray)</B></A> - 
Method in class math.<A HREF="../math/MyVectormath.html" title="class in math">MyVectormath</A>
<DD><B>Deprecated.</B>&nbsp;<I></I>&nbsp;
<DT><A HREF="../math/MyVectormath.html#calculateRay2RayIntersectionMatrixStyle(graphics.Ray, graphics.Ray)"><B>calculateRay2RayIntersectionMatrixStyle(Ray, Ray)</B></A> - 
Method in class math.<A HREF="../math/MyVectormath.html" title="class in math">MyVectormath</A>
<DD>Berechnet den Schnittpunkt zweier Geraden im 3-dimensionalen Raum durch Loesen des zugehorigen Gleichungssystems
 ueber die JAMA-Matrix-Solver.
<DT><A HREF="../math/MyVectormath.html#calculateRayPlaneIntersection(graphics.Ray, graphics.Plane)"><B>calculateRayPlaneIntersection(Ray, Plane)</B></A> - 
Method in class math.<A HREF="../math/MyVectormath.html" title="class in math">MyVectormath</A>
<DD>Berechnung des Schnittpunktes einer Geraden mit einer Ebene
 Ebene wird in hessescher Normalenform angebeben mit Normalen- und Stuetzvektor
 Gerade als Punkt- Richtungs-Form
 es gilt: 
 t = (N * (d - P0)) / (N * V)
 mit: 
 P0 := Stuetzvektor der Geraden
 N  := Normalenvektor der Ebene
 d  := Stuetzvektor der Ebene
 V  := Richtungsvektor der Geraden
 wenn t = 0, dann ist Gerade entweder echt parallel zur Ebene oder in dieser enthalten
 sonst ist der Schnittpunkt P (einsetzen in die Geradengleichung):
 P = P0 + tV
<DT><A HREF="../math/MyVectormath.html#calculateRayPlaneIntersectionNewSchool(graphics.Ray, graphics.Plane)"><B>calculateRayPlaneIntersectionNewSchool(Ray, Plane)</B></A> - 
Method in class math.<A HREF="../math/MyVectormath.html" title="class in math">MyVectormath</A>
<DD>Method berechnet den Schnittpunkt einer Geraden und einer Ebene durch das Gleichsetzen der
 Punkt-Richtungsform der Geraden mit der Parameterform der Ebene.
<DT><A HREF="../math/MyVectormath.html#calculateRotatedVector(graphics.MyVector3f, graphics.MyVector3f, float)"><B>calculateRotatedVector(MyVector3f, MyVector3f, float)</B></A> - 
Method in class math.<A HREF="../math/MyVectormath.html" title="class in math">MyVectormath</A>
<DD>diese Funktion rotiert den uebergebenen Vektor um die uebergebene Achse um den uebergebenen Winkel
 basiert auf der Aufstellung einer Rotationsmatrix basierend auf der Rotationsachse
 diese muss normalisiert werden, damit es sich um einen Einheitsvektor handelt
 Definition Drehmatrix um beliebige Achse: http://de.wikipedia.org/wiki/Drehmatrix#Drehmatrizen_des_Raumes_R.C2.B3
 Variablennamen orientieren sich am Wikipedia-Artikel
<DT><A HREF="../math/MyVectormath.html#calculateScaledTriangle(graphics.Vertex3d[])"><B>calculateScaledTriangle(Vertex3d[])</B></A> - 
Method in class math.<A HREF="../math/MyVectormath.html" title="class in math">MyVectormath</A>
<DD>Methode berechnet aus drei Punkten ein skaliertes Dreieck, bei dem die Eingabeeckpunkte
 um einen bestimmten prozentualen Anteil des Umfangs in Richtung ihrer Winkelhalbierenden
 verschoben werden, dadurch entsteht ein Dreieck mit groesserer Flaeche aber gleichen Proportionen
<DT><A HREF="../algorithm/AbstractEvent.html#calculateShrinkDistance()"><B>calculateShrinkDistance()</B></A> - 
Method in class algorithm.<A HREF="../algorithm/AbstractEvent.html" title="class in algorithm">AbstractEvent</A>
<DD>&nbsp;
<DT><A HREF="../algorithm/SkeletonEdge.html#calculateSlopePlane()"><B>calculateSlopePlane()</B></A> - 
Method in class algorithm.<A HREF="../algorithm/SkeletonEdge.html" title="class in algorithm">SkeletonEdge</A>
<DD>&nbsp;
<DT><A HREF="../algorithm/SkeletonJob.html#calculateVertexChildPosition(float, graphics.MyVector3f, graphics.MyVector3f)"><B>calculateVertexChildPosition(float, MyVector3f, MyVector3f)</B></A> - 
Method in class algorithm.<A HREF="../algorithm/SkeletonJob.html" title="class in algorithm">SkeletonJob</A>
<DD>berechnet fuer die aktuelle Position und den aktuellen
 Verschiebungsvektor die Position des Kindes auf der Zielhoehe
<DT><A HREF="../math/MyVectormath.html#calculateWinkelhalbierende(graphics.Ray, graphics.Ray)"><B>calculateWinkelhalbierende(Ray, Ray)</B></A> - 
Method in class math.<A HREF="../math/MyVectormath.html" title="class in math">MyVectormath</A>
<DD>berechnet die Winkelhalbierende der beiden uebergebenen Rays
 Die Winkelhalbierende zweier Vektoren a und b mit gemeinsamem Stuetzpunkt C
 berechnet sich durch die Addition der Einheitsvektoren von a und b
 http://www.mathe-online.at/mathint/vect1/i.html#30
<DT><A HREF="../math/MyVectormath.html#calculateWinkelhalbierendeForReflexVertex(algorithm.SkeletonVertex)"><B>calculateWinkelhalbierendeForReflexVertex(SkeletonVertex)</B></A> - 
Method in class math.<A HREF="../math/MyVectormath.html" title="class in math">MyVectormath</A>
<DD>handelt es sich bei dem betrachteten Vertex um ein Reflex-Vertex, so muss
 die Winkelhalbierende basierend auf dem Reflexionsgesetz (Einfallswinkel
 = Ausfallswinkel) neu berechnet werden Formel: (R = 2N(N*L)-L) mit: L :=
 berechnete Winkelhalbierende fuer spitzen Winkel N := Vertexnormale R :=
 berechneter Reflexionsvektor
<DT><A HREF="../algorithm/SkeletonVertex.html#clone()"><B>clone()</B></A> - 
Method in class algorithm.<A HREF="../algorithm/SkeletonVertex.html" title="class in algorithm">SkeletonVertex</A>
<DD>&nbsp;
<DT><A HREF="../graphics/Plane.html#clone()"><B>clone()</B></A> - 
Method in class graphics.<A HREF="../graphics/Plane.html" title="class in graphics">Plane</A>
<DD>&nbsp;
<DT><A HREF="../graphics/Ray.html#clone()"><B>clone()</B></A> - 
Method in class graphics.<A HREF="../graphics/Ray.html" title="class in graphics">Ray</A>
<DD>&nbsp;
<DT><A HREF="../graphics/Vertex3d.html#clone()"><B>clone()</B></A> - 
Method in class graphics.<A HREF="../graphics/Vertex3d.html" title="class in graphics">Vertex3d</A>
<DD>&nbsp;
<DT><A HREF="../algorithm/SkeletonVertex.html#cloneBasicComponents()"><B>cloneBasicComponents()</B></A> - 
Method in class algorithm.<A HREF="../algorithm/SkeletonVertex.html" title="class in algorithm">SkeletonVertex</A>
<DD>&nbsp;
<DT><A HREF="../algorithm/SkeletonJob.html#computeHeightEvents()"><B>computeHeightEvents()</B></A> - 
Method in class algorithm.<A HREF="../algorithm/SkeletonJob.html" title="class in algorithm">SkeletonJob</A>
<DD>durchlaeuft alle Vertices und berechnet Schnittpunkte von je 2 adjazenten
  Ebenen mit allen anderen Ebenen
<DT><A HREF="../algorithm/SkeletonJob.html#computeVertexChildPosition(float, algorithm.SkeletonVertex)"><B>computeVertexChildPosition(float, SkeletonVertex)</B></A> - 
Method in class algorithm.<A HREF="../algorithm/SkeletonJob.html" title="class in algorithm">SkeletonJob</A>
<DD><B>Deprecated.</B>&nbsp;<I></I>&nbsp;
<DT><A HREF="../controller/package-summary.html"><B>controller</B></A> - package controller<DD>&nbsp;<DT><A HREF="../algorithm/SkeletonJob.html#createChildrenForSplitEvent(algorithm.SplitEvent)"><B>createChildrenForSplitEvent(SplitEvent)</B></A> - 
Method in class algorithm.<A HREF="../algorithm/SkeletonJob.html" title="class in algorithm">SkeletonJob</A>
<DD>Methode erzeugt Kinder fuer SplitEvents, je ein "Original"-Kind und ein Zwilling
<DT><A HREF="../algorithm/SkeletonJob.html#createChildrenForVertexEvent(algorithm.VertexEvent)"><B>createChildrenForVertexEvent(VertexEvent)</B></A> - 
Method in class algorithm.<A HREF="../algorithm/SkeletonJob.html" title="class in algorithm">SkeletonJob</A>
<DD>Methode erzeugt Kinder fuer VertexEvents, jedes Parent-Vertex bekommt ein eigenes Kind
<DT><A HREF="../algorithm/SkeletonJob.html#createVertexEventForSchnittpunkt(graphics.MyVector3f)"><B>createVertexEventForSchnittpunkt(MyVector3f)</B></A> - 
Method in class algorithm.<A HREF="../algorithm/SkeletonJob.html" title="class in algorithm">SkeletonJob</A>
<DD>Ersetzt alle SplitEvents im Event-Buffer, die den uebergebenen Schnittpunkt besitzen, 
 durch ein Vertex-Event
</DL>
<HR>


<!-- ======= START OF BOTTOM NAVBAR ====== -->
<A NAME="navbar_bottom"><!-- --></A>
<A HREF="#skip-navbar_bottom" title="Skip navigation links"></A>
<TABLE BORDER="0" WIDTH="100%" CELLPADDING="1" CELLSPACING="0" SUMMARY="">
<TR>
<TD COLSPAN=2 BGCOLOR="#EEEEFF" CLASS="NavBarCell1">
<A NAME="navbar_bottom_firstrow"><!-- --></A>
<TABLE BORDER="0" CELLPADDING="0" CELLSPACING="3" SUMMARY="">
  <TR ALIGN="center" VALIGN="top">
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../overview-summary.html"><FONT CLASS="NavBarFont1"><B>Overview</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <FONT CLASS="NavBarFont1">Package</FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <FONT CLASS="NavBarFont1">Class</FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <FONT CLASS="NavBarFont1">Use</FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../overview-tree.html"><FONT CLASS="NavBarFont1"><B>Tree</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../deprecated-list.html"><FONT CLASS="NavBarFont1"><B>Deprecated</B></FONT></A>&nbsp;</TD>
  <TD BGCOLOR="#FFFFFF" CLASS="NavBarCell1Rev"> &nbsp;<FONT CLASS="NavBarFont1Rev"><B>Index</B></FONT>&nbsp;</TD>
  <TD BGCOLOR="#EEEEFF" CLASS="NavBarCell1">    <A HREF="../help-doc.html"><FONT CLASS="NavBarFont1"><B>Help</B></FONT></A>&nbsp;</TD>
  </TR>
</TABLE>
</TD>
<TD ALIGN="right" VALIGN="top" ROWSPAN=3><EM>
</EM>
</TD>
</TR>

<TR>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
&nbsp;<A HREF="index-1.html"><B>PREV LETTER</B></A>&nbsp;
&nbsp;<A HREF="index-3.html"><B>NEXT LETTER</B></A></FONT></TD>
<TD BGCOLOR="white" CLASS="NavBarCell2"><FONT SIZE="-2">
  <A HREF="../index.html?index-filesindex-2.html" target="_top"><B>FRAMES</B></A>  &nbsp;
&nbsp;<A HREF="index-2.html" target="_top"><B>NO FRAMES</B></A>  &nbsp;
&nbsp;<SCRIPT type="text/javascript">
  <!--
  if(window==top) {
    document.writeln('<A HREF="../allclasses-noframe.html"><B>All Classes</B></A>');
  }
  //-->
</SCRIPT>
<NOSCRIPT>
  <A HREF="../allclasses-noframe.html"><B>All Classes</B></A>
</NOSCRIPT>


</FONT></TD>
</TR>
</TABLE>
<A NAME="skip-navbar_bottom"></A>
<!-- ======== END OF BOTTOM NAVBAR ======= -->

<A HREF="index-1.html">A</A> <A HREF="index-2.html">C</A> <A HREF="index-3.html">D</A> <A HREF="index-4.html">E</A> <A HREF="index-5.html">G</A> <A HREF="index-6.html">H</A> <A HREF="index-7.html">I</A> <A HREF="index-8.html">L</A> <A HREF="index-9.html">M</A> <A HREF="index-10.html">N</A> <A HREF="index-11.html">P</A> <A HREF="index-12.html">R</A> <A HREF="index-13.html">S</A> <A HREF="index-14.html">T</A> <A HREF="index-15.html">U</A> <A HREF="index-16.html">V</A> <HR>

</BODY>
</HTML>
